@using Before.Infrastructure.Extensions
@using Blob.Contracts.Models.ViewModels
@using PagedList
@using PagedList.Mvc
@model UserPageVm

<div id="userPageContent">

    @if (Model != null && Model.Items != null && Model.Items.Any())
    {
        <table class="table table-hover table-striped">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Items.First().UserName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items.First().Email)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Items.First().Enabled)
                    </th>
                    <th>
                        <div class="pull-right">
                            @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-plus'></span>", "Add new User", "Create", "User", routeValues: null, htmlAttributes: new { @class = "btn btn-primary" })
                        </div>
                    </th>
                </tr>
            </thead>

            <tbody>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td>
                            <a href="@Url.Action("Single", "User", new { id = item.UserId })">@Html.DisplayFor(modelItem => item.UserName)</a>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Enabled)
                        </td>
                        <td>
                            <div class="pull-right">
                                @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-pencil'></span>", "Edit", "Edit", "User", routeValues: new { id = item.UserId }, htmlAttributes: new { data_modal = "", @class = "btn btn-default" })
                                &nbsp;
                                @if (item.Enabled)
                                {
                                    @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-trash'></span>", "Disable", "Disable", "User", routeValues: new { id = item.UserId }, htmlAttributes: new { data_modal = "", @class = "btn btn-danger" })
                                }
                                else
                                {
                                    @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-arrow-up'></span>", "Enable", "Enable", "User", routeValues: new { id = item.UserId }, htmlAttributes: new { data_modal = "", @class = "btn btn-default" })
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {@:
        <div class="text-muted">&nbsp;No devices found.</div>
    }

    <div id="userPageContentPager">
        @Html.PagedListPager(new StaticPagedList<UserListItemVm>(Model.Items, (IPagedList)ViewBag.PagingMetaData),
                             (Func<int, string>)ViewBag.PageUrl,
                             PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(
                                                                                   new PagedListRenderOptions
                                                                                   {
                                                                                       LinkToFirstPageFormat = String.Format("<<"),
                                                                                       LinkToPreviousPageFormat = String.Format("<"),
                                                                                       LinkToNextPageFormat = String.Format(">"),
                                                                                       LinkToLastPageFormat = String.Format(">>"),
                                                                                       MaximumPageNumbersToDisplay = 5,
                                                                                       DisplayEllipsesWhenNotShowingAllPageNumbers = false
                                                                                   },
                                                                                   new AjaxOptions
                                                                                   {
                                                                                       UpdateTargetId = "userPageContent",
                                                                                       HttpMethod = "GET",
                                                                                       InsertionMode = InsertionMode.Replace,
                                                                                       LoadingElementId = "progressPnl"
                                                                                   }))
    </div>
</div>
