@using Before.Infrastructure.Extensions
@using Blob.Contracts.Models.ViewModels
@using PagedList
@using PagedList.Mvc
@model DevicePageVm

<div id="devicePageContent">

    @if (Model != null && Model.Items != null && Model.Items.Any())
    {
        <table class="table table-hover table-striped">
            <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Items.First().Status)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Items.First().DeviceName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Items.First().DeviceType)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Items.First().LastActivityDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Items.First().Enabled)
                </th>
                <th>
                    <div class="pull-right">
                        @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-plus'></span>", "Add a device", "Create", "Device", routeValues: null, htmlAttributes: new {@class = "btn btn-primary"})
                    </div>
                </th>
            </tr>
            </thead>

            <tbody>
            @foreach (var item in Model.Items)
            {
                <tr class="@Html.AlertLevelClass(item.Status)">
                    <td>
                        @Html.AlertLevelValue(item.Status)
                    </td>
                    <td>
                        <a href="@Url.Action("Single", "Device", new {id = item.DeviceId})">@Html.DisplayFor(modelItem => item.DeviceName)</a>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DeviceType)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastActivityDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Enabled)
                    </td>
                    <td>
                        <div class="pull-right">
                            <span class="dropdown">
                                    <a href="#" class="btn btn-default dropdown-toggle" data-toggle="dropdown" title="Issue command"><span class='glyphicon glyphicon-arrow-down'></span> <span class="caret"></span></a>
                                    <ul class="dropdown-menu" role="menu">
                                        @foreach (var cmd in item.AvailableCommands)
                                        {
                                            <li>
                                                @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-arrow-down'></span> " + cmd.ShortName, "Issue Command", "IssueCommand", "Device", routeValues: new {id = item.DeviceId, commandType = cmd.CommandType}, htmlAttributes: new {data_modal = "", @class = "btn btn-default"})
                                            </li>
                                        }
                                    </ul>
                                </span>
                            &nbsp;
                            @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-pencil'></span>", "Edit", "Edit", "Device", routeValues: new {id = item.DeviceId}, htmlAttributes: new {data_modal = "", @class = "btn btn-default"})
                            &nbsp;
                            @if (item.Enabled)
                            {
                                @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-trash'></span>", "Disable", "Disable", "Device", routeValues: new {id = item.DeviceId}, htmlAttributes: new {data_modal = "", @class = "btn btn-danger"})
                            }
                            else
                            {
                                @Html.NoEncodeActionLink("<span class='glyphicon glyphicon-arrow-up'></span>", "Enable", "Enable", "Device", routeValues: new {id = item.DeviceId}, htmlAttributes: new {data_modal = "", @class = "btn btn-default"})
                            }
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {@:
        <div class="text-muted">&nbsp;No devices found.</div>
    }

    <div id="devicePageContentPager">
        @Html.PagedListPager(new StaticPagedList<DeviceListItemVm>(Model.Items, (IPagedList) ViewBag.PagingMetaData),
                             (Func<int, string>) ViewBag.PageUrl,
                             PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(
                                                                                   new PagedListRenderOptions
                                                                                   {
                                                                                       LinkToFirstPageFormat = String.Format("<<"),
                                                                                       LinkToPreviousPageFormat = String.Format("<"),
                                                                                       LinkToNextPageFormat = String.Format(">"),
                                                                                       LinkToLastPageFormat = String.Format(">>"),
                                                                                       MaximumPageNumbersToDisplay = 5,
                                                                                       DisplayEllipsesWhenNotShowingAllPageNumbers = false
                                                                                   },
                                                                                   new AjaxOptions
                                                                                   {
                                                                                       UpdateTargetId = "devicePageContent",
                                                                                       HttpMethod = "GET",
                                                                                       InsertionMode = InsertionMode.Replace,
                                                                                       LoadingElementId = "progressPnl"
                                                                                   }))
    </div>

</div>
